syntax = "proto3";

import "google/protobuf/empty.proto";

option java_multiple_files =  true;

package kademlia;

message PingRequest 
{
  Node node = 1;
  bytes publicKey = 2;
  bytes signature = 3;
}

message PingResponse 
{
  bytes id = 1;
  bool online = 2;
  bytes publicKey = 3;
  bytes signature = 4;
}

message Node
{
  bytes id = 1;
  string ip = 2;
  uint32 port = 3;
  bytes randomX = 4;
}

message NodeSignature
{
  bytes signature = 1;
}

message Offer
{
  Node node = 1;
  float price = 2;
}

message Transaction
{
  // Tipo 1: inicio de auction | Tipo 2: bid/proposta | Tipo 3: fecho de auction
  string id = 1;
  uint32 type = 2;
  Node owner = 3;
  Offer sender = 4;
  bytes signature = 5;
}

message StoreTransactionRequest
{
  Node node = 1;
  bytes nodeID = 2;
  Transaction transaction = 3;
  bytes publicKey = 4;
  bytes signature = 5;
}

message StoreTransactionResponse
{
  bytes id = 1;
  bool stored = 2;
  bytes publicKey = 3;
  bytes signature = 4;
}

/*
message StoreBlockRequest
{
  Node node = 1;
  Transaction transaction = 2;
  Block block = 3 ;
  bytes publicKey = 4;
  bytes signature = 5;
}

message StoreBlockResponse
{
  bytes id = 1;
  bool stored = 2;
  bytes publicKey = 3;
  bytes signature = 4;
}

 */

message FindNodeRequest
{
  Node node = 1;
  bytes nodeID = 2;
  uint32 k = 3;
  bytes publicKey = 4;
  bytes signature = 5;
}

// Interativo ou recursivo
message FindNodeResponse
{
  bytes id = 1;
  repeated Node nodes = 2;
  bytes publicKey = 3;
  bytes idSignature = 4;
}

/*
message FindBlockRequest
{
  Node node = 1;
  bytes key = 2;
  bytes publicKey = 3;
  bytes signature = 4;
}

message FindBlockResponse
{
  bytes id = 1;
  bool hasBlcok = 2;
  Block b = 3;
  repeated Node nodes = 4;
  bytes publicKey = 5;
  bytes signature = 6;
}


 */
message FindAuctionRequest
{
  Node node = 1;
  bytes nodeID = 2;
  bytes publicKey = 3;
  bytes signature = 4;
}

message FindAuctionResponse
{
  bytes id = 1;
  bool hasTransaction = 2;
  Transaction t = 3;
  repeated Node nodes = 4;
  bytes publicKey = 5;
  bytes signature = 6;
}



service Kademlia
{
  // Unary
  rpc ping(PingRequest) returns (PingResponse);

  // store a [key, value] pair for later retrieval
  //rpc storeBlock(StoreBlcokRequest) returns (StoreBlockResponse);

  rpc storeTransaction(StoreTransactionRequest) returns (StoreTransactionResponse);

  // 160-bit key as an argument, returns (IP address, UDP port, Node ID) for each k closest nodes to target id
  rpc findNode(FindNodeRequest) returns (FindNodeResponse);

  // similar to findNode + if RPC recipient received a STORE for the given key then it returns the stored value
  //rpc findBlock(FindBlockRequest) returns (FindBlockResponse);

  rpc findAuction(FindAuctionRequest) returns (FindAuctionResponse);


}






