syntax = "proto3";

import "google/protobuf/empty.proto";

option java_multiple_files =  true;

package kademlia;

message PingRequest 
{
  Node node = 1;
}

message PingResponse 
{
  bool online  = 1;
}

message Node
{
  bytes id = 1;
  string ip = 2;
  uint32 port = 3;
  string publickey = 4;
}

message Offer
{
  Node node = 1;
  float price = 2;
}
message StoreRequest
{
  Node node = 1;
  string key = 2;
  string value = 3;
}

message StoreResponse
{
  bytes id = 1;
  bool stored = 2;
}

message FindNodeRequest
{
  Node node = 1;
  bytes key = 2;
  uint32 k = 3;
}

// Interativo ou recursivo
message FindNodeResponse
{
  bytes id = 1;
  repeated Node nodes = 2;
}

message FindValueRequest
{
  Node node = 1;
  string key = 2;
}

message FindValueResponse
{
  bytes id = 1;
  string value = 2;
}

message NotifyRequest
{
  bytes serviceId = 1;
  Node node = 2;
  float price = 3;
}

message getPriceRequest
{
  bytes serviceId = 1;
}

message getPriceResponse
{
  float price = 1;
}

message sendPriceRequest
{
  bytes serviceId = 1;
  Offer offer = 2;
}

message sendPriceResponse
{
  bool result = 1;
}

message initiateServiceRequest
{
  bytes owner = 1;
  bytes serviceId = 2;
  repeated Node nodes = 3;
  uint32 time = 4;
}

message initiateServiceResponse
{
  bool response = 1;
}

message subscribeRequest
{
  Node node = 1;
  bytes serviceId = 2;
}

message subscribeResponse
{
  bool response = 1;
}
message timerOverRequest
{
  Node node = 1;
  bytes serviceId = 2;
}
message timerOverResponse
{
  bool response = 1;
  Offer of = 2;
}

message endServiceRequest
{
  Node node =1 ;
  bytes serviceId = 2;
}

message endServiceResponse
{
  bool response =1;
}
message communicateBiggestRequest
{
  bytes serviceId = 1;
  Node node = 2;
  Offer of = 3;
}

message communicateBiggestResponse
{
  bool response = 1;
}


service Kademlia
{
  // Unary
  rpc ping(PingRequest) returns (PingResponse);

  // store a [key, value] pair for later retrieval
  rpc store(StoreRequest) returns (StoreResponse);

  // 160-bit key as an argument, returns (IP address, UDP port, Node ID) for each k closest nodes to target id
  rpc findNode(FindNodeRequest) returns (FindNodeResponse);

  // similar to findNode + if RPC recipient received a STORE for the given key then it returns the stored value
  rpc findValue(FindValueRequest) returns (FindValueResponse);

  rpc notify(NotifyRequest) returns (google.protobuf.Empty);

  rpc getPrice(getPriceRequest) returns (getPriceResponse);

  rpc sendPrice(sendPriceRequest) returns (sendPriceResponse);

  rpc initiateService(initiateServiceRequest) returns (initiateServiceResponse);

  rpc subscribe(subscribeRequest) returns (subscribeResponse);

  rpc timerOver(timerOverRequest) returns (timerOverResponse);

  rpc endService(endServiceRequest) returns (endServiceResponse);

  rpc communicateBiggest(communicateBiggestRequest) returns (communicateBiggestResponse);
}






