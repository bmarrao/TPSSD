syntax = "proto3";

import "google/protobuf/empty.proto";

option java_multiple_files =  true;

package kademlia;

message PingRequest 
{
  Node node = 1;
  bytes publicKey = 2;
  bytes signature = 3;
}

message PingResponse 
{
  bytes id = 1;
  bool online = 2;
  bytes publicKey = 3;
  bytes signature = 4;
}

message Node
{
  bytes id = 1;
  string ip = 2;
  uint32 port = 3;
  bytes randomX = 4;
}

message NodeSignature
{
  bytes signature = 1;
}

message Offer
{
  Node node = 1;
  float price = 2;
}

message Transaction
{
  // Tipo 1: inicio de auction | Tipo 2: bid/proposta | Tipo 3: fecho de auction
  bytes id = 1;
  uint32 type = 2;
  Node owner = 3;
  Node broker = 4;
  bytes signature = 5;
  Offer sender = 6;
}

message StoreRequest
{
  Node node = 1;
  bytes key = 2;
  Node value = 3;
  bytes publicKey = 4;
  bytes signature = 5;
}

message StoreResponse
{
  bytes id = 1;
  bool stored = 2;
  bytes publicKey = 3;
  bytes signature = 4;
}

message FindNodeRequest
{
  Node node = 1;
  bytes key = 2;
  uint32 k = 3;
  bytes publicKey = 4;
  bytes signature = 5;
}

// Interativo ou recursivo
message FindNodeResponse
{
  bytes id = 1;
  repeated Node nodes = 2;
  bytes publicKey = 3;
  bytes idSignature = 4;
}

message FindValueRequest
{
  Node node = 1;
  bytes key = 2;
  bytes publicKey = 3;
  bytes signature = 4;
}

message FindValueResponse
{
  bytes id = 1;
  Node value = 2;
  repeated Node nodes = 3;
  bytes publicKey = 4;
  bytes signature = 5;
}


message NewAuctionRequest
{
  // TODO THE SIGNATURE AND THE HEAD OF THE MESSAGE SHOULD STILL BE THE SIGNATURE OF THE WINNER OF THE AUCTION

  bytes serviceID = 1;
  Node sender = 2;
  Node owner = 3;
  bytes signature = 4;

}

message CloseAuctionRequest
{
  // TODO THE SIGNATURE AND THE HEAD OF THE MESSAGE SHOULD STILL BE THE SIGNATURE OF THE WINNER OF THE AUCTION
  bytes serviceID = 1;
  Node sender = 2;
  Node owner = 3;
  bytes signature = 4;
  Offer winner = 5;
}

message PlaceBidRequest
{
  // TODO THE SIGNATURE AND THE HEAD OF THE MESSAGE SHOULD STILL BE THE SIGNATURE OF THE WINNER OF THE AUCTION

  bytes serviceID = 1;
  Node sender = 2;
  Node owner = 3;
  bytes signature = 4;
  Offer newBid = 5;
}

//FIX REQUEST
message getPriceRequest
{
  bytes serviceId = 1;
  bytes publicKey = 2;
  bytes signature = 3;

}

message getPriceResponse
{
  float price = 1;
  bytes publicKey = 2;
  bytes signature = 3;

}


service Kademlia
{
  // Unary
  rpc ping(PingRequest) returns (PingResponse);

  // store a [key, value] pair for later retrieval
  rpc store(StoreRequest) returns (StoreResponse);

  // 160-bit key as an argument, returns (IP address, UDP port, Node ID) for each k closest nodes to target id
  rpc findNode(FindNodeRequest) returns (FindNodeResponse);

  // similar to findNode + if RPC recipient received a STORE for the given key then it returns the stored value
  rpc findValue(FindValueRequest) returns (FindValueResponse);

  rpc NewAuction(NewAuctionRequest) returns (google.protobuf.Empty);

  rpc PlaceBid(PlaceBidRequest) returns (google.protobuf.Empty);

  rpc CloseAuction(CloseAuctionRequest) returns (google.protobuf.Empty);

  rpc getPrice(getPriceRequest) returns (getPriceResponse);


}






