syntax = "proto3";

option java_multiple_files =  true;

package kademlia;

message PingRequest 
{
  string myNodeId = 1;
}

message PingResponse 
{
    bool response= 1;
}

message Node
{
  string id = 1;
  string ip = 2;
  uint32 port = 3;
}

message StoreRequest
{
  string id = 1;
  string key = 2;
  string val = 3;
  string ip = 4;
  uint32 port = 5;
}

message StoreResponse
{
  bool stored = 1;
}

message FindNodeRequest
{
  string id = 1;
  string ip = 2;
  uint32 port = 3;
  string key = 4;
}

// Interativo ou recursivo
message FindNodeResponse
{
  string id = 1;
  repeated Node nodes = 2;
}

message FindValueRequest
{
  string id = 1;
  string ip = 2;
  uint32 port = 3;
  string key = 4;
}

message FindValueResponse
{
  string id = 1;
  //NÃ£o vai ser string provavelme3nte
  string val = 2;
  repeated Node nodes = 3;
}
service Kademlia
{

  //TODO Adicionar metodos pro Bootstrap node - Cristina
  //rpc iniateBootstrap()
  // Unary
  rpc ping(PingRequest) returns (PingResponse);

  // store a [key, value] pair for later retrieval
  rpc store(StoreRequest) returns (StoreResponse);

  // 160-bit key as an argument, returns (IP address, UDP port, Node ID) for each k closest nodes to target id
  rpc findNode(FindNodeRequest) returns (FindNodeResponse);

  // similar to findNode + if RPC recipient received a STORE for the given key then it returns the stored value
  rpc findValue(FindValueRequest) returns (FindValueResponse);


}






